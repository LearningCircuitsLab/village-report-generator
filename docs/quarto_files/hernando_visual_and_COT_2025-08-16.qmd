---
title: "ðŸ“Š visual_and_COT_data 2025-08-16 Report"
date: today
format:
  html:
    theme: lux
    toc: true
    toc-depth: 2
    page-layout: custom
    css: styles.css
    code-tools: false
    smooth-scroll: true
    anchor-sections: true
execute:
  echo: false
  warning: false
  message: false
  fig-align: center
jupyter: python3
---
::: {.panel-tabset}
# Overview

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

```{python}
#| label: import_libraries
import pandas as pd
import numpy as np
import lecilab_behavior_analysis.utils as utils
from pathlib import Path
import matplotlib.pyplot as plt
from lecilab_behavior_analysis.figure_maker import subject_progress_figure
import lecilab_behavior_analysis.df_transforms as dft
import lecilab_behavior_analysis.plots as plots
import seaborn as sns
import plotly.express as px
from lecilab_behavior_analysis.figure_maker import session_summary_figure
from village.plots.corridor_plot import corridor_plot
from IPython.display import clear_output
clear_output(wait=True)
```

```{python}
#| label: define_variables
max_date = pd.to_datetime("2025-08-16") + pd.Timedelta(days=1)
project = "visual_and_COT_data"
subjects = ['ACV001', 'ACV002', 'ACV003', 'ACV004', 'ACV005', 'ACV006', 'ACV007', 'ACV008', 'ACV009', 'ACV010']
```
```{python}
#| label: load_events_and_sessions_summary
local_path = Path(utils.get_outpath()) / Path(project)
events_df = utils.load_all_events(project)
sessions_summary_df = pd.read_csv(local_path / Path("sessions_summary.csv"), sep=";")
```

```{python}
#| label: reduce_events_df_and_session_summary_to_max_date
events_df['date'] = pd.to_datetime(events_df['date'])
sessions_summary_df['date'] = pd.to_datetime(sessions_summary_df['date'])
events_df = events_df[events_df['date'] <= max_date]
sessions_summary_df = sessions_summary_df[sessions_summary_df['date'] <= max_date]

```

```{python}
#| label: load_data_for_all_subjects
df_list = []
for mouse in subjects:
    local_path = Path(utils.get_outpath()) / Path("visual_and_COT_data") / Path("sessions") / Path(mouse)
    df = pd.read_csv(local_path / Path(f'{mouse}.csv'), sep=";")
    df['date'] = pd.to_datetime(df['date'])
    df = df[df.date <= max_date]
    df_list.append(dft.get_performance_through_trials(df, window=50))
df = pd.concat(df_list, ignore_index=True)
df = dft.analyze_df(df)
```

Corridor plot of the last 4 days
```{python}
#| label: make_corridor_plot
cp = corridor_plot(
    df = events_df,
    subjects = subjects,
    width = 15,
    height = 3,
    ndays = 4,
    from_date = max_date + pd.Timedelta(days=0.5),
)
```

Performance over time for all mice
```{python}
#| label: reactive_performance_plot_for_all_mice
fig = px.line(df, x='total_trial', y='performance_w', color='subject')
plt.close('all')
fig
```

```{python}
#| label: generate_TV_report
hours_back = 24  # hours to look back for the report
report_df, last_date = utils.generate_tv_report(events_df, sessions_summary_df, hours_back)
fig = plots.plot_table_from_df(report_df, title="TV Report - Last {} Hours from {}".format(hours_back, last_date))
fig.show()
```

```{python}
#| label: generate_training_stages_table
# Get the order of training stages based on first appearance
training_stages_order = df['current_training_stage'].dropna().unique().tolist()
# Create pivot table
tr_stage_df = df.groupby(['subject', 'current_training_stage']).size().unstack(fill_value=0).reset_index()
# Reorder columns
tr_stage_df = tr_stage_df.reindex(columns=['subject'] + training_stages_order)
fig = plots.plot_table_from_df(tr_stage_df, title="Trials by Training Stage")
fig.show()
```

```{python}
#| label: get_trials_and_performance_of_last_days
# get the number of trials and performance of each animal for the past days
ndays = 3
df_nt_per = df.groupby(['subject', 'year_month_day']).agg(
    trials=('trial', 'count'),
    performance=('correct', 'mean')
).reset_index()
# make the performance only with three decimal points
df_nt_per['performance'] = df_nt_per['performance'].apply(lambda x: f"{x:.3f}")
# pivot to have the year_month_day as columns
df_nt_per = df_nt_per.pivot(index='subject', columns='year_month_day', values=['trials', 'performance'])
# select the last X days from the multilevel columns
df_nt_per_last = df_nt_per.loc[:, df_nt_per.columns.get_level_values(1).isin(df_nt_per.columns.levels[1][-ndays:])]
df_nt_per_last.reset_index(inplace=True)
# Render table adapting the multilevel columns
df_nt_per_last.columns = df_nt_per_last.columns.map(lambda x: f"{x[0]}_{x[1]}" if x[1] else x[0])
fig = plots.plot_table_from_df(df_nt_per_last, title="Trials and Performance of last days")
fig.show()
```

Behavioral Box occupancy and training times heatmap
```{python}
#| label: box_occupancy_and_training_times
occupancy_df = dft.get_start_and_end_of_sessions_df(df)
daily_percentages = dft.get_daily_occupancy_percentages(occupancy_df)
occupancy_heatmap = dft.get_occupancy_heatmap(occupancy_df, window_size=30)
fig, axs = plt.subplots(1, 2, figsize=(9, 4), gridspec_kw={'width_ratios': [3, 2]})
plots.plot_percentage_of_occupancy_per_day(daily_percentages, ax=axs[0])
fig.delaxes(axs[1])
axs[1] = fig.add_subplot(1, 2, 2, projection='polar')
plots.plot_training_times_clock_heatmap(occupancy_heatmap, ax=axs[1])
plt.tight_layout()
plt.show()
```

Overall number of trials and performance for the whole training cohort
```{python}
#| label: overall_trials_and_performance
df_to_plot = df.groupby(['subject', 'year_month_day', 'current_training_stage']).size().reset_index(name='trials')
df_to_plot_correct = df.groupby(['subject', 'year_month_day', 'current_training_stage'])[['correct', 'miss_trial']].mean().reset_index()
df_to_plot = df_to_plot.merge(df_to_plot_correct, on=['subject', 'year_month_day', 'current_training_stage'])
df_to_plot = df_to_plot.sort_values(by=['year_month_day'])
df_to_plot['current_training_stage'] = df_to_plot['current_training_stage'].replace({
    'not saved': 'Habituation',
})
fig, axs = plt.subplots(1, 2, figsize=(10, 3))
axs = axs.ravel()
sns.lineplot(data=df_to_plot, x='year_month_day', y='trials', hue='current_training_stage', ax=axs[0])
axs[0].set_title('Number of trials per day')
sns.lineplot(data=df_to_plot, x='year_month_day', y='correct', hue='current_training_stage', ax=axs[1])
axs[1].set_title('Correct percentage per day')
for ax in axs:
    ax.set_xlabel('Date')
    ax.tick_params(axis='x', rotation=45)
    ax.set_xticks(ax.get_xticks())
    ax.set_xticklabels(ax.get_xticklabels(), ha='right')
    # reduce the number of x ticks to a maximum of 16
    ax.xaxis.set_major_locator(plt.MaxNLocator(16))
for ax in axs[1:]:
    ax.legend_.remove()
plt.show()
```

# ACV001

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV001
mouse = "ACV001"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV001
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV002

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV002
mouse = "ACV002"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV002
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV003

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV003
mouse = "ACV003"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV003
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV004

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV004
mouse = "ACV004"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV004
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV005

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV005
mouse = "ACV005"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV005
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV006

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV006
mouse = "ACV006"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV006
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV007

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV007
mouse = "ACV007"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV007
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV008

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV008
mouse = "ACV008"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV008
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV009

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV009
mouse = "ACV009"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV009
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

# ACV010

[Go back home](https://learningcircuitslab.github.io/village-report-generator/index.html)

Summary of the subject's full training history
```{python}
#| label: subject_summary_for_ACV010
mouse = "ACV010"
subject_df = df[df['subject'] == mouse]
events_df = utils.load_all_events("visual_and_COT_data")
fig1 = subject_progress_figure(subject_df, perf_window=100, summary_matrix_plot=False, events_df=events_df)
plt.close('all')
fig1
```

Analysis of data from 2025-08-16
```{python}
#| label: date_summary_for_ACV010
date = "2025-08-16"
subject_df = dft.add_day_column_to_df(subject_df)
subject_df = dft.add_trial_of_day_column_to_df(subject_df)
sdf = subject_df[subject_df["year_month_day"] == date]
try:
    fig = session_summary_figure(sdf, perf_window=50, width=15, height=10, events_df=events_df)
    plt.close('all')
    display(fig)
except (KeyError, ValueError) as e:
    plt.close('all')
    print(f"Skipping session_summary_figure for {date}: {type(e).__name__} - {e}")
```

:::